import fs from 'fs';
import { platform } from 'node:process';
import { getCliArgs } from '../utils/index.js';
/**
 * Sanitizes the version from a dependency in package.json.
 *
 * @param version The dependency version.
 * @returns A sanitized version or undefined if the version is a path.
 */
const sanitizePackageJsonVersion = (_version) => {
    let version = _version;
    if (!version) {
        return undefined;
    }
    if (version.charAt(0) === '^' || version.charAt(0) === '~') {
        version = version.substring(1);
    }
    /**
     * If a dependency is a file path set the value to undefined as we
     * don't want to collect file paths in telemetry
     */
    if (version.startsWith('file:')) {
        version = undefined;
    }
    return version;
};
/**
 * Marshall the JS and WP telemetry data into a single object for GA.
 * @param wpTelemetryData
 */
export const marshallTelemetryData = (wpTelemetryData, command) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const telemetryData = {
        node_faustwp_core_version: sanitizePackageJsonVersion((_a = packageJson === null || packageJson === void 0 ? void 0 : packageJson.dependencies) === null || _a === void 0 ? void 0 : _a['@faustwp/core']),
        node_faustwp_cli_version: sanitizePackageJsonVersion((_b = packageJson === null || packageJson === void 0 ? void 0 : packageJson.dependencies) === null || _b === void 0 ? void 0 : _b['@faustwp/cli']),
        node_apollo_client_version: sanitizePackageJsonVersion((_c = packageJson === null || packageJson === void 0 ? void 0 : packageJson.dependencies) === null || _c === void 0 ? void 0 : _c['@apollo/client']),
        node_version: process.versions.node,
        node_next_version: sanitizePackageJsonVersion((_d = packageJson === null || packageJson === void 0 ? void 0 : packageJson.dependencies) === null || _d === void 0 ? void 0 : _d.next),
        node_is_development: getCliArgs()[0] === 'dev',
        platform,
        setting_has_frontend_uri: (_e = wpTelemetryData === null || wpTelemetryData === void 0 ? void 0 : wpTelemetryData.faustwp) === null || _e === void 0 ? void 0 : _e.has_frontend_uri,
        setting_redirects_enabled: (_f = wpTelemetryData === null || wpTelemetryData === void 0 ? void 0 : wpTelemetryData.faustwp) === null || _f === void 0 ? void 0 : _f.redirects_enabled,
        setting_rewrites_enabled: (_g = wpTelemetryData === null || wpTelemetryData === void 0 ? void 0 : wpTelemetryData.faustwp) === null || _g === void 0 ? void 0 : _g.rewrites_enabled,
        setting_themes_disabled: (_h = wpTelemetryData === null || wpTelemetryData === void 0 ? void 0 : wpTelemetryData.faustwp) === null || _h === void 0 ? void 0 : _h.themes_disabled,
        setting_img_src_replacement_enabled: (_j = wpTelemetryData === null || wpTelemetryData === void 0 ? void 0 : wpTelemetryData.faustwp) === null || _j === void 0 ? void 0 : _j.image_source_replacement_enabled,
        faustwp_version: (_k = wpTelemetryData === null || wpTelemetryData === void 0 ? void 0 : wpTelemetryData.faustwp) === null || _k === void 0 ? void 0 : _k.version,
        is_wpe: wpTelemetryData === null || wpTelemetryData === void 0 ? void 0 : wpTelemetryData.is_wpe,
        multisite: wpTelemetryData === null || wpTelemetryData === void 0 ? void 0 : wpTelemetryData.multisite,
        php_version: wpTelemetryData === null || wpTelemetryData === void 0 ? void 0 : wpTelemetryData.php_version,
        wp_version: wpTelemetryData === null || wpTelemetryData === void 0 ? void 0 : wpTelemetryData.wp_version,
        command,
    };
    return telemetryData;
};
