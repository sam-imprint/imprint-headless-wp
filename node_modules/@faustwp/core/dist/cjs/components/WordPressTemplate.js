"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordPressTemplate = void 0;
const react_1 = __importStar(require("react"));
const index_js_1 = require("../auth/index.js");
const client_js_1 = require("../client.js");
const index_js_2 = require("../config/index.js");
const getTemplate_js_1 = require("../getTemplate.js");
const seedQuery_js_1 = require("../queries/seedQuery.js");
const convert_js_1 = require("../utils/convert.js");
function WordPressTemplate(props) {
    const { templates } = (0, index_js_2.getConfig)();
    if (!templates) {
        throw new Error('Templates are required. Please add them to your config.');
    }
    const { __SEED_NODE__: seedNodeProp, __TEMPLATE_QUERY_DATA__: templateQueryDataProp, } = props;
    const [seedNode, setSeedNode] = (0, react_1.useState)(seedNodeProp);
    const template = (0, getTemplate_js_1.getTemplate)(seedNode, templates);
    const [data, setData] = (0, react_1.useState)(templateQueryDataProp);
    const [loading, setLoading] = (0, react_1.useState)(template === null);
    const [isPreview, setIsPreview] = (0, react_1.useState)(templateQueryDataProp ? false : null);
    const [isAuthenticated, setIsAuthenticated] = (0, react_1.useState)(null);
    /**
     * Determine if the URL we are on is for previews
     */
    (0, react_1.useEffect)(() => {
        if (!window) {
            return;
        }
        setIsPreview(window.location.search.includes('preview=true'));
    }, []);
    /**
     * If the URL we are on is for previews, ensure we are authenticated.
     */
    (0, react_1.useEffect)(() => {
        if (isPreview === null || isPreview === false) {
            return;
        }
        void (async () => {
            const ensureAuthRes = await (0, index_js_1.ensureAuthorization)({
                redirectUri: window.location.href,
            });
            if (ensureAuthRes !== true && (ensureAuthRes === null || ensureAuthRes === void 0 ? void 0 : ensureAuthRes.redirect)) {
                window.location.replace(ensureAuthRes.redirect);
            }
            setIsAuthenticated(ensureAuthRes);
        })();
    }, [isPreview]);
    /**
     * Execute the seed query.
     *
     * If the seed query was not available via a prop, it was not executed on the
     * server, meaning we are either dealing with a CSR page, or a preview page.
     */
    (0, react_1.useEffect)(() => {
        if (isPreview === null) {
            return;
        }
        if (isPreview === true && isAuthenticated !== true) {
            return;
        }
        void (async () => {
            var _a;
            const client = (0, client_js_1.getApolloClient)();
            let seedQueryUri = window.location.href.replace(window.location.origin, '');
            if (isPreview) {
                seedQueryUri = (0, convert_js_1.getQueryParam)(window.location.href, 'previewPathname');
                if (seedQueryUri === '') {
                    throw new Error('The URL must contain the proper "previewPathname" query param for previews.');
                }
            }
            let queryArgs = {
                query: seedQuery_js_1.SEED_QUERY,
                variables: {
                    uri: seedQueryUri,
                },
            };
            if (isPreview) {
                queryArgs = Object.assign(Object.assign({}, queryArgs), { context: {
                        headers: {
                            /**
                             * We know the access token is available here since we ensured
                             * authorization in the useEffect above
                             */
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            Authorization: `bearer ${(0, index_js_1.getAccessToken)()}`,
                        },
                    } });
            }
            if (!seedNode) {
                setLoading(true);
                const seedQueryRes = await client.query(queryArgs);
                const node = (_a = seedQueryRes === null || seedQueryRes === void 0 ? void 0 : seedQueryRes.data) === null || _a === void 0 ? void 0 : _a.node;
                setSeedNode(node);
            }
        })();
    }, [seedNode, isPreview, isAuthenticated]);
    /**
     * Finally, get the template's query data.
     */
    (0, react_1.useEffect)(() => {
        // We don't know yet if this is a preview route or not
        if (isPreview === null) {
            return;
        }
        // This is a preview route, but we are not authenticated yet.
        if (isPreview === true && isAuthenticated !== true) {
            return;
        }
        void (async () => {
            const client = (0, client_js_1.getApolloClient)();
            if (!template || !(template === null || template === void 0 ? void 0 : template.query) || !seedNode) {
                return;
            }
            if (!data) {
                setLoading(true);
                let queryArgs = {
                    query: template === null || template === void 0 ? void 0 : template.query,
                    variables: (template === null || template === void 0 ? void 0 : template.variables)
                        ? template === null || template === void 0 ? void 0 : template.variables(seedNode, { asPreview: isPreview })
                        : undefined,
                };
                if (isPreview) {
                    queryArgs = Object.assign(Object.assign({}, queryArgs), { context: {
                            headers: {
                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                Authorization: `bearer ${(0, index_js_1.getAccessToken)()}`,
                            },
                        } });
                }
                const templateQueryRes = await client.query(queryArgs);
                setData(templateQueryRes.data);
                setLoading(false);
            }
        })();
    }, [data, template, seedNode, isPreview, isAuthenticated]);
    if (!template) {
        return null;
    }
    const Component = template;
    return react_1.default.createElement(Component, Object.assign(Object.assign({}, props), { data, loading }), null);
}
exports.WordPressTemplate = WordPressTemplate;
