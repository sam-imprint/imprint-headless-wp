"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuth = void 0;
const trim_js_1 = __importDefault(require("lodash/trim.js"));
const defaults_js_1 = __importDefault(require("lodash/defaults.js"));
const react_1 = require("react");
const index_js_1 = require("../auth/index.js");
function useAuth(_config) {
    const config = (0, defaults_js_1.default)(_config, {
        strategy: 'redirect',
        shouldRedirect: false,
    });
    if (config.strategy === 'local' && !config.loginPageUrl) {
        throw new Error('useAuth: Local strategies must specify the "loginPageUrl"');
    }
    const [isAuthenticated, setIsAuthenticated] = (0, react_1.useState)(null);
    const [isReady, setIsReady] = (0, react_1.useState)(false);
    const [loginUrl, setLoginUrl] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        const ensureAuthorizationConfig = {
            redirectUri: window.location.href,
        };
        if (config.strategy === 'local') {
            ensureAuthorizationConfig.loginPageUri = `/${(0, trim_js_1.default)(config.loginPageUrl, '/')}?redirect_uri=${encodeURIComponent(window.location.href)}`;
        }
        /* eslint-disable @typescript-eslint/no-floating-promises */
        (async () => {
            const authResult = await (0, index_js_1.ensureAuthorization)(ensureAuthorizationConfig);
            setIsAuthenticated(authResult === true);
            if (authResult !== true &&
                (authResult === null || authResult === void 0 ? void 0 : authResult.login) &&
                config.strategy === 'local') {
                setLoginUrl(authResult.login);
            }
            if (authResult !== true &&
                (authResult === null || authResult === void 0 ? void 0 : authResult.redirect) &&
                config.strategy === 'redirect') {
                setLoginUrl(authResult.redirect);
            }
            setIsReady(true);
        })();
        // NOTE: This effect should only be ran once on mount, so we are not
        // providing the exhaustive deps to useEffect.
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    /**
     * Automatically redirect the user to the login page if the
     * shouldRedirect option is set to true.
     */
    (0, react_1.useEffect)(() => {
        if (!config.shouldRedirect ||
            !isReady ||
            isAuthenticated !== false ||
            !loginUrl) {
            return;
        }
        /**
         * Using a setTimeout here because the page transition
         * is a little too fast and makes for bad UX.
         */
        setTimeout(() => {
            window.location.assign(loginUrl);
        }, 200);
    }, [isReady, isAuthenticated, loginUrl, config]);
    return {
        isAuthenticated,
        isReady,
        loginUrl,
    };
}
exports.useAuth = useAuth;
